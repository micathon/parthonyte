do (
gdefun do (
  p;
);
defun (p) (var x y z) do (
  set z 777;
  # while loop executes do block just once
  # operations:
    # push: default operation
	# pop
	# goto: modify rightp
	# return
	# [KWD]: keyword stack push or pop
  # ---------------- 1st pass ----------
  # (2) pushWhileStmt: top
    # ZSTMT, while zstmt addr
    # [WHILE], while zstmt addr
  # (1) exprtok: kwtop = WHILE
  # ---------------- 2nd pass ----------
  # (2) pushWhileStmt: top
    # ZSTMT, while zstmt addr
    # [WHILE], while zstmt addr
  # (1) exprtok: kwtop = WHILE

  while (> z 444) do (
    # -------------- 1st pass ----------
      # true
    # (1) exprtok: kwtop = WHILE
	# (3) handleDoToken: ival = 1
	  # pop true
	  # set ("z 333") zstmt addr, [DO]
	  # return 0
	# (1) exprtok: kwtyp popped = DO
	# runDoStmt: top
	  # pop set zstmt addr: rightp is +ve
	# handleStmtKwd
	  # goto set zstmt addr
    # -------------- 2nd pass ----------
      # false
    # (1) exprtok: kwtop = WHILE
	# (3) handleDoToken: ival = 0
	  # pop false
	  # pop while zstmt addr
	  # return 0
    # (1) exprtok: kwtyp popped = WHILE
	# handleStmtKwd
	  # pop while zstmt addr, ZSTMT
	  # goto println zstmt "p: btm"

    set z 333;
	println "while: z =" z;
	# (4) handleDoBlock: btm, WHILE
	  # pop [WHILE], while zstmt addr
	  # pop while zstmt addr
	  # pop ZSTMT
	  # goto while zstmt addr
  );
  println "p: btm";
  set z 999;
  # pushSetStmt:
    # ZSTMT, set zstmt addr
    # [SET]
  # handleStmtKwd
    # pop set zstmt addr, ZSTMT
	# goto (next) set zstmt addr
);
)
