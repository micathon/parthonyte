do (
gdefun do (
  #println "gdefun: top";
  q;
  #println "gdefun: btm";
);
defun (q) (var flag n i) do (
  println "q: top";
  set n (p);
  println "q: n =" n;
  println "q: btm";
);
defun (p) (var i j k) do (
  #set k 77;
  return 77;
);
# zstmt set, ZSTMT
# [SET]
# 1 (n)
# [ZCALL], zcall
# (
# 2 (p)
# pop [ZCALL]
# runZcallStmt: top
# [DO], [DO]
# pops 2 (p)
# pops (
# pops zcall
# 0, 1, 2 (i, j, k)
# 3 (varCount)
# 11 (currLocBase)
# (
# 1 (locDepth)
# ZSTMT, NULL
# return addr of: return 77;
# ZSTMT
# addr of: return 77;
# pushRtnStmt: top
# [RETURN]
# 77
# pop [RETURN]
# pop [DO], [DO]
# pop 77
# pop addr of: return 77;
# pop 2 ZSTMT
# pop 5 NULL
# pop 2 ZSTMT
# pop 2 (locDepth)
# pop 1 (currZstmt)
# pop 11 (varCount)




{#
  println "p: top";
  #for (= i 0; ? (< i 3); ++ i) do (
  while false do (
    println "p, loop: top";
	break;
	println "p, loop: btm";
  );
  println "p: btm";
#}

	# if true do (
	{#
	if false do (
      println "p, loop: if false";
	);
	if true do (
	  println "p, if: top";
      #break;
	  println "p, if: btm";
	);
	#}

  {#
  set n 3;
  #while flag do (
  for (= i 0; ? (< i n); ++ i) do (
    println "q, loop: top, i =" i;
	if (>= i 1) do (
      set n 0;
	);
	if true do (
	  continue;
	);
	println "q, loop: btm";
  );
  #}
)
